{"version":3,"sources":["containers/Blog/Posts/Posts.module.css","axios.js","components/Post/Post.js","containers/Blog/FullPost/FullPost.js","containers/Blog/Posts/Posts.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","defaults","headers","common","post","props","console","log","className","onClick","clicked","title","author","FullPost","state","loadedPost","deletePostHandler","delete","match","params","id","then","response","this","loadData","get","setState","data","style","textAlign","body","Component","Posts","posts","postSelectedHandler","history","push","pathname","updatedPost","slice","map","catch","error","key","styles","path","url","exact","component","AsyncNewPost","React","lazy","Blog","auth","to","activeClassName","hash","search","render","fallback","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","myInterceptorRequest","interceptors","request","use","Promise","reject","eject","myInterceptorResponse","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.578bed14.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Posts\":\"Posts_Posts__1QkvQ\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://jsonplaceholder.typicode.com'\r\n})\r\n\r\ninstance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTANCE';\r\n\r\nexport default instance;\r\n","import React from 'react';\n//import {withRouter} from 'react-router-dom';\nimport './Post.css';\n\nconst post = (props) => {\n  console.log(props);\n    return(\n    <article className=\"Post\" onClick={props.clicked}>\n        <h1>{props.title}</h1>\n        <div className=\"Info\">\n            <div className=\"Author\">{props.author}</div>\n        </div>\n    </article>\n  );\n};\n\nexport default post;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './FullPost.css';\n\nclass FullPost extends Component {\n   state={\n     loadedPost:null\n   }\n    componentDidMount(){\n      console.log(this.props);\n      this.loadData();\n\n    }\n\n   componentDidUpdate(){\n     this.loadData();\n   }\n\n   loadData(){\n     if(this.props.match.params.id){\n       if(!this.state.loadedPost || this.state.loadedPost && this.state.loadedPost.id != +this.props.match.params.id){\n         axios.get('/posts/'+this.props.match.params.id)\n         .then(response=>{\n           this.setState({loadedPost:response.data});\n         })\n       }\n\n     }\n   }\n    deletePostHandler=()=>{\n      axios.delete('/posts/'+this.props.match.params.id).\n      then(response=>{\n        console.log(response);\n      });\n    }\n    render () {\n        let post = <p style={{textAlign:'center'}}>Please select a Post!</p>;\n        if(this.props.match.params.id){\n          post = <p style={{textAlign:'center'}}>Loading!</p>\n        }\n        if(this.state.loadedPost){\n          post = (\n              <div className=\"FullPost\">\n                  <h1>{this.state.loadedPost.title}</h1>\n                  <p>{this.state.loadedPost.body}</p>\n                  <div className=\"Edit\">\n                      <button className=\"Delete\" onClick={this.deletePostHandler}>Delete</button>\n                  </div>\n              </div>\n\n          );\n        }\n\n        return post;\n    }\n}\n\nexport default FullPost;\n","import React ,{Component} from 'react'\r\nimport axios from '../../../axios';\r\nimport Post from '../../../components/Post/Post';\r\nimport styles from './Posts.module.css';\r\nimport {Route} from 'react-router-dom';\r\nimport FullPost from '../FullPost/FullPost';\r\nclass Posts extends Component{\r\n  state={\r\n    posts:[],\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log(this.props);\r\n    axios.get('/posts')\r\n    .then(response=>{\r\n      const posts = response.data.slice(0,4);\r\n      const updatedPost = posts.map(post =>{\r\n        return {\r\n          ...post,\r\n          author:'Max'\r\n        }\r\n      })\r\n      //console.log(response);\r\n      this.setState({posts:updatedPost});\r\n    }).catch(error=>{\r\n      console.log(error);\r\n      //this.setState({error:true});\r\n    });\r\n\r\n  }\r\n\r\n  postSelectedHandler=(id)=>{\r\n    //this.setState({selectedPostId:id});\r\n    this.props.history.push({pathname:'/posts/'+id});\r\n  }\r\n\r\n  render(){\r\n    let posts = <p style={{textAlign:'center'}}> Something went wrong!</p>\r\n    if(!this.state.error){\r\n      posts = this.state.posts.map(post=>{\r\n        return (//<Link to ={'/'+post.id} key={post.id}>\r\n          <Post key={post.id}  title={post.title} author = {post.author} clicked ={()=>this.postSelectedHandler(post.id)}/>\r\n          //</Link>\r\n        )\r\n      })\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <section className={styles.Posts}>\r\n            {posts}\r\n        </section>\r\n      <Route path={this.props.match.url+'/:id'} exact component ={FullPost} />\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Posts\r\n","import React, { Component,Suspense } from 'react';\n//import axios from 'axios';\nimport {Route,NavLink,Switch,Redirect} from 'react-router-dom';\n// import FullPost from '../../components/FullPost/FullPost';\n// import NewPost from '../../components/NewPost/NewPost';\nimport Posts from './Posts/Posts';\n//import NewPost from './NewPost/NewPost';\nimport asyncComponent from '../../hoc/asyncComponent';\n\nimport './Blog.css';\n\nimport axios from '../../axios';\nconst AsyncNewPost = React.lazy(()=> import('./NewPost/NewPost') )\n// const AsyncNewPost = asyncComponent(()=>{\n//   return import('./NewPost/NewPost');\n// })\n\n\n\n\nclass Blog extends Component {\n\n  state={\n    auth:true\n  }\n    render () {\n\n        return (\n            <div className=\"Blog\">\n              <header>\n                <nav>\n                  <ul>\n                    <li><NavLink to='/posts'\n                    exact\n                    activeClassName='active'>Posts</NavLink></li>\n                    <li><NavLink to={{\n                      pathname:'/new-post',\n                      hash:'#submit',\n                      search:'?quick-submit=true'\n                    }}>New Post </NavLink></li>\n\n                  </ul>\n                </nav>\n              </header>\n              {/* <Route path=\"/\" exact render={()=><h1>Home</h1>} />\n               <Route path=\"/\" exact render={()=><h1>Home2</h1>} /> */}\n               <Switch>\n\n              {/*{this.state.auth?<Route path=\"/new-post\"  component ={AsyncNewPost} />:null} */}\n              <Route path='/new-post' render ={()=>(\n                <Suspense fallback={<div>Loading...</div>}>\n                  <AsyncNewPost/>\n                </Suspense>\n              )} />\n              <Route path=\"/posts\"  component ={Posts} />\n              <Route render={()=><h1>Not Found</h1>} />\n              {/*<Redirect from ='/' to ='/posts' />*/}\n              </Switch>\n            </div>\n        );\n    }\n}\n\nexport default Blog;\n","import React, { Component } from 'react';\nimport {BrowserRouter} from 'react-router-dom'\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Blog />\n        </div>\n      </BrowserRouter>\n\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport axios from 'axios'\n\n\naxios.defaults.baseURL = \"https://jsonplaceholder.typicode.com\";\naxios.defaults.headers.common['Authorization'] = 'AUTH TOKEN';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\nvar myInterceptorRequest = axios.interceptors.request.use(request =>{\n  console.log(request);\n\n  return request;\n},error=>{\n  console.log(error);\n  return Promise.reject(error);\n})\n\naxios.interceptors.request.eject(myInterceptorRequest);\n\n\nvar myInterceptorResponse= axios.interceptors.response.use(response=>{\n  console.log(response);\n\n  return response;\n},error=>{\n  console.log(error);\n\n  return  Promise.reject(error);\n})\n\naxios.interceptors.request.eject(myInterceptorResponse);\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}